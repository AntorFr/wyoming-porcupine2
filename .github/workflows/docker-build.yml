#
name: Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  push:
    branches: ['release','main']

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  information:
    name: Gather build information
    runs-on: ubuntu-latest
    outputs:
      architectures: ${{ steps.info.outputs.architectures }}
      base_image_signer: ${{ steps.info.outputs.codenotary_base_image }}
      build: ${{ steps.info.outputs.build }}
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🕵️ Get build config
        shell: bash
        id: info
        run: |
          build="./build.yaml"

          echo "build=${build}" >> "$GITHUB_OUTPUT"

          codenotary_signer=$(
          yq --no-colors eval '.codenotary.signer' "${build}"
          )
          echo "codenotary_signer=${codenotary_signer}" >> "$GITHUB_OUTPUT"

          codenotary_base_image=$(
            yq --no-colors eval '.codenotary.base_image' "${build}"
          )
          echo "codenotary_base_image=${codenotary_base_image}" >> "$GITHUB_OUTPUT"

          architectures=$(
                yq --no-colors --output-format json  eval '.arch' "${build}" \
                  | jq --raw-output --compact-output '. | sort'
          )
          echo "architectures=${architectures}" >> "$GITHUB_OUTPUT"
  
  build:
    name: Build ${{ matrix.architecture }}
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write

    needs:
      - information

    strategy:
      matrix:
        architecture: ${{ fromJson(needs.information.outputs.architectures) }}

    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🏗 Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0
      - name: 🏗 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      - name: ℹ️ Compose build flags
        id: flags
        run: |
          echo "date=$(date +"%Y-%m-%dT%H:%M:%SZ")" >> "$GITHUB_OUTPUT"
          from=$(yq --no-colors eval ".build_from.${{ matrix.architecture }}" "${{ needs.information.outputs.build }}")
          echo "from=${from}" >> "$GITHUB_OUTPUT"

          if [[ "${{ matrix.architecture}}" = "amd64" ]]; then
            echo "platform=linux/amd64" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "i386" ]]; then
            echo "platform=linux/386" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "armhf" ]]; then
            echo "platform=linux/arm/v6" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "armv7" ]]; then
            echo "platform=linux/arm/v7" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "aarch64" ]]; then
            echo "platform=linux/arm64/v8" >> "$GITHUB_OUTPUT"
          else
            echo "::error ::Could not determine platform for architecture ${{ matrix.architecture }}"
            exit 1
          fi


      - name: 🚀 Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          platforms: ${{ steps.flags.outputs.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_ARCH=${{ matrix.architecture }}
            BUILD_DATE=${{ steps.flags.outputs.date }}
            BUILD_FROM=${{ steps.flags.outputs.from }}
            BUILD_NAME=${{ env.IMAGE_NAME }}
            BUILD_REF=${{ github.sha }}
            BUILD_REPOSITORY=${{ github.repository }}
            BUILD_VERSION=latest

